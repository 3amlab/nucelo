// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique @default(cuid())
  title         String?
  email         String?   @unique
  domain        String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  about         String?   @db.Text()
  newsletter    Boolean   @default(false)

  articles    Article[]
  projects    Project[]
  bookmarks   Bookmark[]
  subscribers Subscriber[]
  collections Collection[]

  // SEO
  seoTitle       String?
  seoDescription String?
  ogImage        String?

  // social links
  twitter      String?
  postscv      String?
  readcv       String?
  github       String?
  linkedin     String?
  dribbble     String?
  contactEmail String?

  // lemon squeezy
  lsId               String?   @unique // subscription id
  lsVariantId        String?
  lsCurrentPeriodEnd DateTime?

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Subscriber {
  id        String   @id @default(uuid())
  email     String
  name      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId ], references: [id])
  userId    String

  @@map(name: "subscribers")
}

model Article {
  id             String   @id @default(cuid())
  title          String
  content        String?  @db.LongText()
  published      Boolean  @default(false)
  slug           String   @default(cuid())
  views          Int      @default(0)
  lastNewsletterSentAt DateTime?
  seoTitle       String?
  seoDescription String?
  ogImage        String?
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @map(name: "updated_at")
  publishedAt    DateTime @default(now())
  authorId       String
  author         User     @relation(fields: [authorId], references: [id])
  canonicalLink String?

  @@unique([authorId, slug])
  @@map(name: "articles")
}

model Project {
  id             String   @id @default(cuid())
  title          String
  content        String?  @db.LongText()
  published      Boolean  @default(false)
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @map(name: "updated_at")
  slug           String   @default(cuid()) 
  views          Int      @default(0)
  year           Int?
  description    String?
  url            String?
  seoTitle       String?
  seoDescription String?
  ogImage        String?
  password       String?
  authorId       String
  author         User     @relation(fields: [authorId], references: [id])

  @@unique([authorId,slug])
  @@map(name: "projects")
}

model Collection {
  id        String     @id @default(cuid())
  name      String
  bookmarks Bookmark[]
  user      User       @relation(fields: [authorId], references: [id])
  authorId  String

  @@map(name: "collections")
}

model Bookmark {
  id           String      @id @default(cuid())
  title        String
  url          String
  createdAt    DateTime    @default(now()) @map(name: "created_at")
  updatedAt    DateTime    @default(now()) @map(name: "updated_at")
  authorId     String
  author       User        @relation(fields: [authorId], references: [id])
  clicks       Int         @default(0)
  collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId String?

  @@map(name: "bookmarks")
}
